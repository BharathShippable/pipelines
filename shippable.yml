resources:
  - name: docker_cli
    type: cliConfig
    integration: docker

  - name: docker_test_img
    type: image
    integration: docker
    pointer:
      sourceName: "bharath92/test"
    seed:
      versionName: master

  - name: docker_test_img_2
    type: image
    integration: docker
    pointer:
      sourceName: "bharath92/test2"
    seed:
      versionName: master

  - name: docker_img_test_repo
    type: gitRepo
    integration: github
    pointer:
      sourceName: bharath92/pipelines
      branch: test

jobs:
  - name: create_docker_img
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: docker_cli
        switch: off
      - IN: docker_img_test_repo
      - OUT: docker_test_img
      - TASK:
          - script: pushd $(shipctl get_resource_state "docker_img_test_repo") && git checkout test
          - script: docker build -t=bharath92/test:master .
          - script: docker push bharath92/test:master
          - script: apt-get install -y uuid-runtime
          - script: |
                    shipctl post_resource_state_multi "docker_test_img" "versionName=$(uuidgen) \
                    IMG_REPO_COMMIT_SHA=$(uuidgen) \
                    BUILD_NUMBER=$BUILD_NUMBER"

  - name: create_docker_img_2
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: docker_cli
        switch: off
      - IN: docker_img_test_repo
      - OUT: docker_test_img_2
      - TASK:
          - script: pushd $(shipctl get_resource_state "docker_img_test_repo") && git checkout test
          - script: docker build -t=bharath92/test2:master .
          - script: docker push bharath92/test2:master
          - script: apt-get install -y uuid-runtime
          - script: |
                    shipctl post_resource_state_multi "docker_test_img_2" "versionName=$(uuidgen) \
                    IMG_REPO_COMMIT_SHA=$(uuidgen) \
                    BUILD_NUMBER=$BUILD_NUMBER"

  - name: rel
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: create_docker_img
        switch: off
      - IN: create_docker_img_2
        switch: off
      - TASK:
          - script: echo "rel"

  - name: commit_to_test_branch
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
    - IN: rel
    - IN: docker_img_test_repo
      switch: off
    - TASK:
        - script: export SSH_PATH=git@github.com:Bharath92/pipelines.git
        - script: pushd $(shipctl get_resource_state "docker_img_test_repo") && git checkout test
        - script: echo lol
        - script: apt-get install -y uuid-runtime
        - script: touch $(uuidgen)
        - script: git add . && git commit -m "adding test file"
        - script: git remote add up $SSH_PATH
        - script: git push up test

  - name: tag_img
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
    - IN: commit_to_test_branch
    - IN: docker_cli
      switch: off
    - IN: docker_test_img
      switch: off
    - IN: docker_test_img_2
      switch: off
    - TASK:
        - script: docker pull bharath92/test:master
        - script: docker tag bharath92/test:master bharath92/test:test
        - script: docker push bharath92/test:test
        - script: docker pull bharath92/test2:master
        - script: docker tag bharath92/test2:master bharath92/test2:test
        - script: docker push bharath92/test2:test

  - name: c7_job
    type: runSh
    runtime:
      nodePool: c7_custom_build_pool
    steps:
    - TASK:
        - script: df -h

  - name: u14_job
    type: runSh
    runtime:
      nodePool: u14_custom_build_pool
    steps:
    - TASK:
        - script: df -h

  - name: u16_job
    type: runSh
    runtime:
      nodePool: u16_custom_build_pool
    steps:
    - TASK:
        - script: df -h

  - name: windoge
    type: runSh
    runtime:
      nodePool: windoge
    steps:
    - TASK:
        - script: |
            function Get-ComputerStats {
              param(
                [Parameter(Mandatory=$true, Position=0,
                           ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
                [ValidateNotNull()]
                [string[]]$ComputerName
              )

              process {
                foreach ($c in $ComputerName) {
                    $avg = Get-WmiObject win32_processor -computername $c |
                               Measure-Object -property LoadPercentage -Average |
                               Foreach {$_.Average}
                    $mem = Get-WmiObject win32_operatingsystem -ComputerName $c |
                               Foreach {"{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory)*100)/ $_.TotalVisibleMemorySize)}
                    $free = Get-WmiObject Win32_Volume -ComputerName $c -Filter "DriveLetter = 'C:'" |
                                Foreach {"{0:N2}" -f (($_.FreeSpace / $_.Capacity)*100)}
                    new-object psobject -prop @{ # Work on PowerShell V2 and below
                    # [pscustomobject] [ordered] @{ # Only if on PowerShell V3
                        ComputerName = $c
                        AverageCpu = $avg
                        MemoryUsage = $mem
                        PercentFree = $free
                    }
                }
              }

             cat '.\servers.txt' | Get-ComputerStats | Format-Table
